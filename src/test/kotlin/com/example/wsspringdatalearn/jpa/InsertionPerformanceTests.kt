package com.example.wsspringdatalearn.jpa

import org.junit.jupiter.api.Test
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.TestPropertySource

const val NUMBER_OF_STOCKS = 10_000

@SpringBootTest
class InsertionPerformanceNoBatching : BaseTestSetup() {
    @Test
    fun regularInsertion() {
        benchmark {
            transactionTemplate.execute {
                val stocks = (1..NUMBER_OF_STOCKS).map { Stock("TSLA$it", "Tesla") }
                stockRepository.persistAll(stocks)
            }!!
        }
    }
}

@SpringBootTest
@TestPropertySource(
    properties = [
        "spring.jpa.properties.hibernate.jdbc.batch_size=50",
        "spring.jpa.properties.hibernate.order_inserts=true",
    ],
)
class InsertionPerformanceBatchingButNotWorking : BaseTestSetup() {
    @Test
    fun `batchedInsertion, but not really`() {
        // Why does this not work?
        // If you use identity type ID, then you can't use batching
        // this is because the ID is generated by the database during the insert and returned after
        // and the batch insert doesn't know what the ID is until after the insert occurs
        benchmark {
            transactionTemplate.execute {
                val stocks = (1..NUMBER_OF_STOCKS).map { Stock("TSLA$it", "Tesla") }
                stockRepository.persistAll(stocks)
            }
        }
    }
}

@SpringBootTest
@TestPropertySource(
    properties = [
        "spring.jpa.properties.hibernate.jdbc.batch_size=50",
        "spring.jpa.properties.hibernate.order_inserts=true",
    ],
)
class InsertionPerformanceBatchingWorking : BaseTestSetup() {
    @Test
    fun `batchedInsertion`() {
        // Why does this not work?
        // If you use identity type ID, then you can't use batching
        // this is because the ID is generated by the database during the insert and returned after
        // and the batch insert doesn't know what the ID is until after the insert occurs
        benchmark {
            transactionTemplate.execute {
                val stocks = (1..NUMBER_OF_STOCKS).map { StockWithSequence("TSLA$it", "Tesla") }
                stockWithSequenceRepository.persistAll(stocks)
            }
        }
    }
}

@SpringBootTest
@TestPropertySource(
    properties = [
        "spring.jpa.properties.hibernate.jdbc.batch_size=50",
        "spring.jpa.properties.hibernate.order_inserts=true",
        "spring.jpa.properties.hibernate.id.optimizer.pooled.preferred=pooled-lo",
    ],
)
class InsertionPerformanceBatchingWorkingPool : BaseTestSetup() {
    @Test
    fun `batchedInsertion`() {
        // Why does this not work?
        // If you use identity type ID, then you can't use batching
        // this is because the ID is generated by the database during the insert and returned after
        // and the batch insert doesn't know what the ID is until after the insert occurs
        benchmark {
            transactionTemplate.execute {
                val stocks = (1..NUMBER_OF_STOCKS).map { StockWithSequencePool("TSLA$it", "Tesla") }
                stockWithSequencePoolRepository.persistAll(stocks)
            }
        }
    }
}
